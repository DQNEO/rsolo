#!/bin/bash
#
# rsolo - a bash knife-solo
#
set -e

PROG=$(basename $0)
VERSION="0.0.1"

usage() {
    cat  <<EOF
Usage: $PROG SUBCOMMAND [OPTIONS] [ARGS]
** $PROG subcommands **
$PROG bootstrap [USER@]HOSTNAME [JSON] (options)
$PROG prepare   [USER@]HOSTNAME [JSON] (options)
$PROG cook      [USER@]HOSTNAME [JSON] (options)
$PROG clean     [USER@]HOSTNAME
$PROG init      DIRECTORY
EOF
EOF
}

usage_cmd_foo() {
    cat  <<EOF
Usage: $PROG foo [OPTIONS] [ARGS]
EOF
}

usage_cmd_bar() {
    cat  <<EOF
Usage: $PROG bar [OPTIONS] [ARGS]
EOF
}

if [[ $# -eq 0 ]]; then
    usage
    exit 1
fi

if [[ "$1" = "--help" || "$1" = "-h" ]]; then
    usage
    exit 1
fi

subcmd=$1
shift

echo "subcmd = " $subcmd

ssh_options=""

for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help'|'help' )
            usage_cmd_${subcmd}
            exit 1
            ;;
        '-F')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -F $2"
            shift 2
            ;;
        '-i')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -i $2"
            shift 2
            ;;
        '-p')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -p $2"
            shift 2
            ;;
        '-b'|'--long-b' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                shift
            else
                shift 2
            fi
            ;;
        '-c'|'--long-c' )
            shift 1
            ;;
        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                #param=( ${param[@]} "$1" )
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done

if [ -z $param ]; then
    usage_cmd_${subcmd}
    exit 1
fi

cmd_cook() {
    hostname=${param[0]}
    set -x
    cmd='sudo echo cook'
    ssh $ssh_options $hostname $cmd
}

cmd_prepare() {
    hostname=${param[0]}
    set -x
    cmd='sudo echo prepare'
    ssh $ssh_options $hostname $cmd
}

cmd_${subcmd}

#echo "ssh_options:" $ssh_options

