#!/bin/bash
#
# rsolo - a bash knife-solo
#
set -e

PROG=$(basename $0)
VERSION="0.1.0"
tmp_file="${TMPDIR}rsolovagrantsshconfig.$$"
remote_dir='~/'${PROG}

# options
rsync_verbose=""
why_run=""
vagrant_mode=""
override_runlist=""

usage() {
    cat  <<EOF
Usage: $PROG [--version] [--help] <command> [options] [args]

Subcommands are:
    $PROG prepare   [options] [user@]hostname
    $PROG cook      [options] [user@]hostname

'$PROG <command> --help' shows help about a specific subcommand
EOF
}

version() {
    echo "$PROG $VERSION"
}

usage_cmd_prepare() {
    cat  <<EOF
Usage: $PROG prepare [OPTIONS] [USER@]HOSTNAME

install Chef on the remote host

EOF
}

usage_cmd_cook() {
    cat  <<EOF
Usage: $PROG cook [OPTIONS] [USER@]HOSTNAME

run chef-solo on the remote host

Options:
    -N, --node-name NAME             The Chef node name for your new node
    -W, --why-run                    Enable whyrun mode
    -o, --override-runlist RunlistItem,RunlistItem...,,
                                      Replace current run list with specified items

    -i, --identity-file FILE         ssh identity file
    -F, --ssh-config-file FILE       ssh config file
    -p, --ssh-port PORT              ssh port

    -h, --help                       Show this message


EOF

# TODO
#    -E, --environment ENVIRONMENT    The Chef environment for your node
#        --format FORMAT              Which format to use for output
#    -r, --run-list RUN_LIST          Comma separated list of roles/recipes to put to node config (if it does not exist)
#    -V, --verbose                    More verbose output. Use twice for max verbosity
}

usage_cmd_helloworld() {
    cat  <<EOF
Usage: $PROG helloworld [OPTIONS] [USER@]HOSTNAME

create cookbook named "helloworld" and run it

EOF
}

if [[ $# -eq 0 ]]; then
    usage
    exit 1
fi

if [[ "$1" = "--debug" ]]; then
    set -x
    IS_DEBUG=1
    rsync_verbose="-v"
    shift
fi

if [[ "$1" = "--help" || "$1" = "-h" ]]; then
    usage
    exit 1
fi

if [[ "$1" = "--version" || "$1" = "-v" ]]; then
    version
    exit
fi

subcmd=$1
shift

ssh_options=""

# http://qiita.com/b4b4r07/items/dcd6be0bb9c9185475bb#2-2
for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help'|'help' )
            usage_cmd_${subcmd}
            exit 1
            ;;
        '-F'|'--ssh-config-file')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -F $2"
            shift 2
            ;;
        '-i'|'--identity-file')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -i $2"
            shift 2
            ;;
        '-p'|'--ssh-port')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            ssh_options="$ssh_options -p $2"
            shift 2
            ;;
        '-N'|'--node-name')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            node_name=$2
            shift 2
            ;;
        '-o'|'--override-runlist')
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "$PROG: option requires an argument -- $1" 1>&2
                exit 1
            fi
            override_runlist="-o $2"
            shift 2
            ;;
        '-W'|'--why-run' )
            why_run="-W"
            shift 1
            ;;
        '--vagrant' )
            vagrant_mode=1
            shift 1
            ;;
        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "$PROG: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                #param=( ${param[@]} "$1" )
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done

_setup_ssh() {
    if [[ $vagrant_mode ]]; then
        if [[ ! -e $tmp_file ]] ; then
            vagrant ssh-config --host=tmphost > $tmp_file
        fi
        hostname=tmphost
        ssh_options="-F $tmp_file"
        if [[ ! $node_name ]]; then
            node_name="vagrant"
        fi

        jsonfile=nodes/${node_name}.json
    else
        hostname=${param[0]}
        if [[ ! $node_name ]]; then
            node_name=${hostname##*@}
        fi
        jsonfile=nodes/${node_name}.json
    fi

    ssh_cmd="ssh $ssh_options $hostname"
    ssh_cmd_t="ssh -t $ssh_options $hostname"
}

_rm_ssh_tmpconfig() {
    if [[ -e $tmp_file ]]; then
        rm $tmp_file
    fi
}

cmd_cook() {

    _setup_ssh

    if [[ ! -e $jsonfile ]] ; then
        echo "$jsonfile file not found" >&2
        exit 1
    fi

    echo "Running Chef on ${hostname}..."

    echo "Uploading the kitchen..."

    sync

    cat $jsonfile | $ssh_cmd "cat > $remote_dir/dna.json"

    environment=$(grep environment $jsonfile | awk -F: '{print $2}' | sed -e 's/[", ]//g')

    echo "Generating solo config..."
    # generate solo.rb
    cat <<EOF |  $ssh_cmd "cat > $remote_dir/solo.rb"

# generated by $PROG
base = File.expand_path('..', __FILE__)

nodes_path                File.join(base, 'nodes')
role_path                 File.join(base, 'roles')
data_bag_path             File.join(base, 'data_bags')
encrypted_data_bag_secret File.join(base, 'data_bags/data_bag_key')
environment_path          File.join(base, 'environments')
ssl_verify_mode           :verify_peer

environment               "$environment"

cookbook_path []
cookbook_path << File.join(base, 'site-cookbooks')
cookbook_path << File.join(base, 'cookbooks')

EOF

    options="$why_run $override_runlist"
    cmd_remote="sudo chef-solo -c $remote_dir/solo.rb -j $remote_dir/dna.json $options"
    echo "Running Chef: $cmd_remote"

    $ssh_cmd_t $cmd_remote

    _rm_ssh_tmpconfig
}

cmd_prepare() {
    _setup_ssh

    if  $ssh_cmd "type chef-solo >/dev/null 2>&1" ; then
        echo "chef-solo is already installed on $hostname"
    else
        # About the Omnibus Installer
        # https://docs.getchef.com/install_omnibus.html
        $ssh_cmd "curl -L https://www.getchef.com/chef/install.sh | sudo bash"
    fi

    _rm_ssh_tmpconfig
}

cmd_helloworld() {
    mkdir -p cookbooks/helloworld/recipes
    echo 'log "hello world"' > cookbooks/helloworld/recipes/default.rb

    _setup_ssh

    if [[ -e $jsonfile ]]; then
        override_runlist="-o helloworld"
    else
        if [[ ! -d nodes ]] ; then
            mkdir nodes
        fi
        echo '{"run_list":["helloworld"]}' > $jsonfile
    fi

    cmd_prepare
    cmd_cook
}

sync() {

    if $ssh_cmd "type rsync >/dev/null 2>&1" ; then
        # rsync
        rsync -rL $rsync_verbose --rsh="$ssh_cmd" --delete-after --exclude=revision-deploys --exclude=tmp --exclude=.git --exclude=.hg --exclude=.svn --exclude=.bzr . :$remote_dir
    else
        # scp
        cmd_clean
        scp -rq $ssh_options . ${hostname}:${remote_dir}/
    fi

}

_clean() {
    $ssh_cmd "rm -rf $remote_dir"
}

cmd_clean() {
    _setup_ssh
    _clean
}

cmd_revendor() {

    # TODO
    # Do we have to care about "bundle exec berks" ?
    if ! type berks 1>/dev/null 2>&1 ; then
        echo "Berkshelf is not installed" >&2
        exit 1
    fi

    rm -rf cookbooks Berksfile.lock
    berks vendor cookbooks
}

# show usage when no args
if [[ -z $param && ! "$vagrant_mode"  && $subcmd != "revendor" ]]; then
    usage_cmd_${subcmd}
    exit 1
fi

cmd_${subcmd}


